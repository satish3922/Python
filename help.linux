_______________________LINUX-TROUBLESHOOTING________________________

_________________________________
>> VLC PERMISSION FOR "ROOT" USER
--------------------------------

	"sed -i 's/geteuid/getppid/' /usr/bin/vlc"

____________________________________
>> TO MAKE SYSTEM ON WHEN LID IS OFF
-----------------------------------

	"systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target"
	"systemctl restart systemd-logind.service"

_________________________________
>> TO INSTALL NETBEANS IN RHEL7.2
--------------------------------
	
	DOWNLOAD
	--------
	
	"wget http://download.netbeans.org/netbeans/8.0.1/final/bundles/netbeans-8.0.1-linux.sh" 
	
	INSTALL
	-------
	
	"chmod 700 netbeans-8.0.1-linux.sh"
	"./netbeans-8.0.1-linux.sh"

__________________
>> TO INSTALL ATOM
-----------------
	
	DOWNLOAD
	--------
	
	"wget https://atom.io/download/rpm"
	
	INSTALL
	-------
	
	"rpm -ivh atom.x86_64.rpm"

_______________________________________________________
>> HOW TO INSTALL FIREFOX LATEST VERSION 'FIREFOX 56.0'
------------------------------------------------------

	FIRST OF ALL WE HAVE TO REMOVE OLDER FIREFOX:
	---------------------------------------------
	
		1. use this command 'yum remove	firefox -y'
		2. use this command 'rm -rf /opt/firefox'

	THEN DOWNLOAD FIREFOX LATEST VERSION IT MAY BE IN .TAR.BZ2 FILE FORMAT
	----------------------------------------------------------------------

	HOW TO EXTRACT THE FILE I.E "FIREFOX.TARBZ2":
	---------------------------------------------
	
		1. use this command 'tar -jxvf firefox.tar.bz2 -C /opt/'

	NOW WE HAVE TO MAKE IT AS SYSTEM COMMAND:
	-----------------------------------------	
	
		1. use this command 'ln -s /opt/firefox/firefox /usr/bin/firefox

	YOU JUST DONE IT !!!
	--------------------

_________________________________
>> HOW TO INSTALL "HPING3.X86_64"
---------------------------------
	
	PACKAGE NAME:
	-------------
	
	hping3.x86_64 0:0.0.20051105-24.el7
	
	DEPENDENCIES:
	-------------
	
	tcl.x86_64 1:8.5.13-8.el7

	REPO NEEDED:
	------------
	
	epel-release.noarch

__________________________________________
>>HOW TO CHECK PUBLIC IP ADDRESS OF SYSTEM
------------------------------------------

	COMMAND
	-------
	
	'dig +short myip.opendns.com @resolver1.opendns.com'

______________________________________________________
>>ADD SSH-KEY TO GITHUB FOR AUTO LOGIN THROUGH TERMINAL
-------------------------------------------------------
	
	GENERATE SSH-KEY
	----------------
	
	'ssh-keygen -t rsa -C "satishsinha3922@gmail.com"'

	COPY ~/.SSH/ID_RSA.PUB KEY
	--------------------------
	
	'cat ~/.ssh/id_rsa.pub'
	'ctrl+shift+c'

	ADDING SSH-KEY TO GITHUB PROFILE
	--------------------------------
	
	Go to Setting -> ssh key -> Add ssh-key

	SETUP CONNECTION
	----------------
	To check the remote link of github
	----------------------------------
	
	'git remote -v'
	origin	https://github.com/satish3922/Python (fetch)
	origin	https://github.com/satish3922/Python (push)
	
	If link is having https:// then run this command
	------------------------------------------------
	
	'git remote set-url origin git@github.com:satish3922/Python'
	
	COMPLETED
	---------
	
	You are all set
	'git push'
	verifying : yes to continue for 1st time
	Done !!!

______________________________________________
>> HOW TO INSTALL IPYTHON NOTEBOOK AND JUPYTER
----------------------------------------------
	
	INSTALL THIS PACKAGES
	---------------------
	
	1. 'yum install gcc gcc-c++'
	2. 'yum install kernel-devel'
	3. 'yum install python-devel'
	4. 'yum install libxslt-devel'
	5. 'yum install libffi-devel' 
	6. 'yum install openssl-devel' 
	7. 'yum install python-pip'

	CHECK VERSION OF PYTHON & PIP
	-----------------------------
	
	'python --version && pip --version'

	INSTALL JUPYTER
	---------------
	
	'pip install jupyter'
	
	HOW TO USE
	----------
	
	'jupyter notebook'

______________________________________
>> HOW TO INSTALL HTTP (APACHE-SERVER)
--------------------------------------

	INSTALLATION
	------------
	
	'yum install httpd -y'

	
	STARTING SERVICE
	----------------
	
	'systemctl start httpd.service'
	
	
	RESTARTING SERVICE
	------------------

	'systemctl restart httpd.service'

	STOPING SERVICE
	---------------

	'systemctl stop httpd.service'

	
	ENABLING AND DISABLING SERCVICE
	-------------------------------

	'systemctl enable httpd.service'	
	
	'systemctl disable httpd.service'	


_______________________________________
>> HOW TO CONFIGURE A PAGE 'index.html'
---------------------------------------

	DOCUMENT ROOT OF HTTP SERVICE
	-----------------------------
	'/var/www/html'
	
	STEP FOR HOSTING A WEBPAGE
	--------------------------
	
	Step : I
	--------
	'make a index.html file in /var/www/html'
	
	Step : II
	---------
	'disable selinux by using this commands'
	'setenforce 0'
	'iptables -F'	

	Step : III
	----------
	'then check in browser'
	'http://localhost/' or 'http://systemIP/' or 'http://127.0.0.1/'

___________________________________________________________________
>> HOW TO VIRTUALLY HOST TWO WEBPAGE AT SAME IP WITH DIFFERENT NAME
-------------------------------------------------------------------

	CONFIGURE
	---------
	'checking configuration file if forgotten'
	'rpm -qc httpd'  			---It will show you the configuration file
	'/etc/httpd/conf/httpd.conf'  		---Configuration file of HTTPD 

	STEP FOR VIRTUAL HOSTING FOR DOCUMENT ROOT /VAR/WWW/VIRTUAL
	-----------------------------------------------------------
	
	Step : I
	--------
	'make a another directory in /var/www/'
	'mkdir /var/www/virtual'
	
	Step : II
	---------
	'make a file in /var/www/virtual/ as index.html'
	'vim /var/www/vitual/index.html'

	Step : III
	----------
	'Now configure /etc/httpd/conf/httpd.conf'
	'write this line in last of file'
	'vim /etc/httpd/conf/httpd.conf'
	
	<virtualhost 192.168.10.140:80>
	servername station140.example.com
	documentroot '/var/www/html'
	</virtualhost>

	<virtualhost 192.168.10.140:80>
	servername virtual140.example.com
	documentroot '/var/www/virtual'
	</virtualhost>

	Step : IV
	---------
	
	'Now start the service'
	'systemctl restart httpd.service'
	'check in browser'
	'station140.example.com' 		---first webpage of default document root
	'virtual140.example.com' 		---second webpage of virtual directory

_______________________________________________________________________
>> SECURE HOSTING A WEBPAGE WHOSE DOCUMENT ROOT IS /VAR/WWW/HTML/SECURE
-----------------------------------------------------------------------
	
	STEP FOR SECURE HOSTING
	-----------------------
	
	Step : I
        --------
	'make a another directory in /var/www/html'
        'mkdir /var/www/html/secure'

        Step : II
        ---------
        'make a file in /var/www/html/secure as index.html'
        'vim /var/www/html/secure/index.html'

        Step : III
        ----------
        'Now configure /etc/httpd/conf/httpd.conf'
	'make sure that your firewall must be closed or you can allow HTTP port'
	'vim /etc/httpd/conf/httpd.conf'

	<virtualhost 192.168.10.140:80>
        servername station140.example.com
        documentroot '/var/www/html'

	<directory /var/www/html/secure>
	order allow,deny
	allow from 127.0.0.1 192.168.122.1      ---localhost IP's where it should shown
	</directory>

        </virtualhost>	
	
	Step : IV
        ---------
        'Now start the service'
        'systemctl restart httpd.service'
        'check in browser'
        'station140.example.com' 		---first webpage of which is not secure 
        'station140.example.com/secure' 	---second webpage of secure directory [only accesible from localhost]


__________________________________________________________________
>> HOSTING THE WEBPAGE  AT DIFFERENT PORT OTHER THAN 80 (say 1123)
------------------------------------------------------------------
	STEP FOR SECURE HOSTING
        -----------------------

        Step : I
        --------
        'make a another directory in /var/www/port'
        'mkdir /var/www/port'

        Step : II
        ---------
        'make a file in /var/www/html/port as index.html'
        'vim /var/www/port/index.html'

        Step : III
        ----------
        'Now configure /etc/httpd/conf/httpd.conf'
	
	'vim /etc/httpd/conf/httpd.conf'
	
	Listen 80
	Listen 1123

	<virtualhost 192.168.10.140:80>
        servername station140.example.com
        documentroot '/var/www/html'
        </virtualhost>
	
	<virtualhost 192.168.10.140:1123>
        servername station140.example.com
        documentroot '/var/www/port'
        </virtualhost>
	
	Step : IV
	---------
	'semanage port -l | grep http' 			---checking the all port allowed to selinux policy for http services
	'semanage port -a -t http_port_t -p tcp 1123' 	---adding the new port to selinux policy


	Step : V
        ---------
        'Now start the service'
        'systemctl restart httpd.service'
        'check in browser'
        'station140.example.com' 		---webpage with 80 port
        'station140.example.com:1123' 		---webpage with 1123 port



_______________________________________
>> DEFINING VARIABLE IN SHELL SCRIPTING
---------------------------------------

	[root@station ~]# x="hello"
	[root@station ~]# echo "hi $x"
	hi hello
	[root@station ~]# x=78       
	[root@station ~]# echo $x
	78       

_____________________________
>> IF ELSE IN SHELL SCRIPTING
-----------------------------

	if [ condition/statement ]
	then
		echo "if part"
	elif [ condition/statement ]
	then 
		echo "elif part"
	else
		echo "else part"	 
	fi     //Closing the if statement

______________________________
>> FOR LOOP IN SHELL SCRIPTING
------------------------------

	Case I
	------

	for((i=0;i<7;i++))
	do
	echo "normal for loop"
	done

	output : normal for loop


	Case II
	-------
	
	for i in 1 2 3
	do
	echo $i
	done

	output : 1 2 3


	Case III
	--------

	for i in `cat hello.txt`
	do 
	echo $i
	done

____________________________
>> SAMPLE OF SHELL SCRIPTING
----------------------------

	Example I
	---------

	#!/bin/bash
	date
	cal
	echo "Hi"
	uname


	Example II
	----------
	
	#!/bin/bash
	echo "Enter your name :"
	read name
	if [ $name == "satish" ] 
	then
	echo "Welcome  Satish"
	elif [ $name == "shubham" ] 
	then 
	echo "Welcome Shubham"
	else
	echo "Intruder entry"
	fi 	


	Example III
	-----------
	
	#!/bin/bash
	if [[ $1 = "satish" ]]
	then
        echo "Welcome to `uname` Satish"
	elif [[ $1 = "shubham" ]]
	then
        echo "Welcome Shubham"
	elif [[ $# = 0 ]]   #If no argument passed then give stdErr
	then
        echo "argErr : NO argument given ,Atleast 1 argument pass"
	else
        echo "Intruder entry"
	fi 	

______________________________
>> HOW TO CONFIGURE NFS-SERVER
------------------------------
	___________
	SERVER SIDE
	-----------

	Installing & Starting Service
	-----------------------------
	
	'yum install nfs-utils -y'
	'systemctl start nfs-server'
	'systemctl enable nfs-server'

	Configuring a nfs server for Client-IP 192.168.10.200
	-----------------------------------------------------
	
	'mkdir /share'  ---folder to be shared as nfs
	'vim /etc/exports'
	'echo "/share 192.168.10.200(ro)" >> /etc/exports' 
	'exportfs -r' ---reloading without closing nfs-server
	
	[ Note : ro - read only permission ]
	[ Note : rw - read write permission ]
	[ Note : IP of Server : 192.168.10.140 ]
	[ Note : IP of Client : 192.168.10.200 ]
	___________
	CLIENT SIDE
	-----------

	Installing & Starting Service
        -----------------------------

        'yum install nfs-utils -y'
        'systemctl start nfs-server'
        'systemctl enable nfs-server'


	Accesing /share in client system using 'autofs'
	-----------------------------------------------

	'yum install autofs -y'
	'systemctl enable --now autofs'
	'cd /net/192.168.10.140'

	Mounting /share in client system
	--------------------------------
	
	'showmount -e 192.168.10.140'
	'mkdir /mnt/share' ---directory where you wanna mount /share on your PC
	'mount 192.168.10.140:/share /mnt/share'
	'vim /etc/fstab'
	'192.168.10.140:/share /mnt/share nfs _netdev 0 0'

	
	NOTE : If you share as 'rw' mode than you must give permission to folder


______________________________________________________________
>> HOW TO USE NMCLI TO SET PERMANENT IP FOR DIFFERENT LOCATION
--------------------------------------------------------------
	
	CHECK CONNECTION
	----------------

	'nmcli connection show'
	
	NAME       UUID                           TYPE             DEVICE     
	virbr0     1d9d6bdd-5e38d5-15a1d60591ea   bridge           virbr0     
	docker0    a9bf4365-e-bea8-0b7a1d5c0f59   bridge           docker0    
	-1floor    e4b17f2gh-97d6-32115fc0ea21    802-11-wireless  wlp6s0     

	CREATING NEW CONNECTION NAME FOR SAME WL6PS0 CARD
	-------------------------------------------------

	'nmcli connection add con-name adhoc type wifi ifname wlp6s0 ssid AdHoc ip4 192.168.10.140/24 gw4 192.168.10.50'

	
_____________________________
>> HOW TO MAKE YOUR IP STATIC
-----------------------------

	'nmcli connection modify -1floor ipv4.addresses 192.168.5.17/24 ipv4.gateway 192.168.5.1 ipv4.method manual connection.autoconnect yes'
	
	'nmcli connection up -1floor'

_________________________________
>> HOW TO INSTALL MARIADB | MYSQL
---------------------------------

	INSTALLATION
	------------
	
	'yum install mariadb-server -y'
	
	CONFIGURE
	---------

	'systemctl enable --now mariadb'
	
	SECURE-INSTALLATION-MYSQL
	-------------------------
	'mysql_secure_installation'
	enter
	enter password :
	press y
	press y
	press y
	
	done !!

	STARTING MYSQL
	--------------
	
	'mysql -u root -p'
	enter password :
	
	CREATE DATABASES
	----------------
	
	MariaDB [(none)]> show databases;
	+--------------------+
	| Database           |
	+--------------------+
	| information_schema |
	| mycloud            |
	| mysql              |
	| performance_schema |
	+--------------------+
	4 rows in set (0.05 sec)
	
	MariaDB [(none)]> create database new;
	Query OK, 1 row affected (0.00 sec)
	
	MariaDB [(none)]> show databases;
	+--------------------+
	| Database           |
	+--------------------+
	| information_schema |
	| mycloud            |
	| mysql              |
	| new                |
	| performance_schema |
	+--------------------+
	5 rows in set (0.00 sec)

	
	CREATE USER FOR MYSQL OTHER THAN ROOT
	-------------------------------------
	
	MariaDB [(none)]> create user 'test' identified by 'test@123'
	Query OK, 0 rows affected (0.00 sec)
	
	GRANT PERMISSION FOR USER TO ACCESS DATABASE (say new)
	------------------------------------------------------

	MariaDB [(none)]> grant create,delete,update,insert on new.* to test;
	Query OK, 0 rows affected (0.00 sec)

	CREATE BACKUP OF ANY DATABASES TO LOCAL SYSTEM
	----------------------------------------------

	'mysqldump -u root -p mycloud > mycloud-backup.sql'
	Enter password:'your mysql root user password'

	RESTORE BACKUP TO ANY DATABASES FROM LOCAL SYSTEM
	-------------------------------------------------
	
	'mysql -u root -p mycloud < mycloud-backup.sql'
        Enter password:'your mysql root user password'




	
	

