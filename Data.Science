__________________________
>> PYTHON FOR DATA SCIENCE
--------------------------
	
'Python has made a huge impact in several industries since it first appearance back in 1991 and meanwhile,
its use in field of data science is no exception.' 

There are few major libraries namely:
	1. NumPy
	2. Pandas
	3. Matplotlib
	4. Scikit-Learn

________
1. NumPy
--------
	NumPy stands for Numerical Python which is created to perform typical numerical calculations on 
	multidimensional arrays. It provides ease working with linear algebra and carrying out complex
	calculations like matrix inversion,fourier transform, etc.

	* How to create a NumPy array in Python:
	----------------------------------------
		lst = [1,2,3]
		
		import numpy as np
		arr = np.array(lst)

	* Add 5 to each element in array:
	---------------------------------
		arr = arr + 5
		print(arr)
		
		# output
		# [6,7,8]

	* Given a list lst do a homogeneity test on each element:
	---------------------------------------------------------
		lst = [1,2,3,'text',True, 3+2j]
		
		import numpy as np
		arr = np.array(lst)
		print(type(arr[0]),type(arr[3]),type(arr[-1]))

		# output
		# <class 'numpy.str_'> <class 'numpy.str_'> <class 'numpy.str_'>

	* Given a list lst find its complete size in bytes:
	---------------------------------------------------
		lst = [15,16,85,9]
		
		import numpy as np
		arr = np.array(lst)
		print(arr.nbytes)
		
		# output
		# 16
	
	* A NumPy nd-array inputs a list as an argument along with an explicit datatype (for typecasting) as shown below:
	-----------------------------------------------------------------------------------------------------------------
		 
		arr = np.array([2,5,6,8], dtype = int)
		print(arr)
		
		# [2 5 6 8]
		print(type(arr))
		
		# class 'numpy.ndarray'
		print(np.result_type(arr))
		
		# int32 
 		
	 
	''' Creation of an array with step size 1.33 between 0 - 10 '''
	print(np.arange(0, 10, 1.33, dtype = np.float64))

	# [ 0.    1.33  2.66  3.99  5.32  6.65  7.98  9.31]
	# arange() gives uncertain number of values based on steps
	# Hence, we use linspace, which asks for total number of values 
	
	''' Creation of an array with total 5 values between 0 - 160 '''
	print(np.linspace(0, 160, 5, dtype = np.float64))
	
	# [   0.   40.   80.  120.  160.] 
 

 
''' Method I: Using array and reshape to convert array into matrix '''
	print(np.array([5,6,8,45,12,52]).reshape(2,3))
	# [[ 5  6  8]
	#  [45 12 52]]

''' Method II: Using matrix function '''
	print(np.matrix([[1,2],
                [3,4]]))
	# [[1 2]
	#  [3 4]]

''' Method III: Using misc. functions '''
	print(np.eye(3)) # Identity matrix
	# [[ 1.  0.  0.]
	#  [ 0.  1.  0.]
	#  [ 0.  0.  1.]]
	
	print( np.zeros( (4,3) ) )
	# [[ 0.  0.  0.]
	#  [ 0.  0.  0.]
	#  [ 0.  0.  0.]
	#  [ 0.  0.  0.]]
	
	print(np.ones( (3,3), dtype = np.float64 ))
	# [[ 1.  1.  1.]
	#  [ 1.  1.  1.]
	#  [ 1.  1.  1.]]
 
	* Create a 4 x 4 matrix and add values 4,5,6 above the parent diagonal:
	-----------------------------------------------------------------------

	np.diag([4,5,6],1)
	
	* Given a Numpy array arr = np.arange(11), negate all the elements between 6 and 10:
	------------------------------------------------------------------------------------
	
	arr = np.arange(11)
	m = arr>6 & arr<10
	arr[m] *= -1

	* Fetch Column wise element:
	----------------------------
	
	arr = np.array([2,3],[43,4])
	
	# To fetch 1st Column only
	arr[:,0]

	# To fetch multiple column
	arr[:,0:2]


	* Given a matrix mat, sort it by the second column:
	--------------------------------------------------- 
	
	import numpy as np
	mat = np.array([[1,21,3],[5,4,2],[56,12,4]])
 	
	ind = mat[:,1].argsort(axis=0)
	mat[ind]
	
	* 



